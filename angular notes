/*
1. Build an Application with Angular 2 and Firebase - Application Demo and Course Objectives
intro

2. Installing Node and the Angular 2 and Firebase Demo Application
- need node 6 or higher
to install go to nodejs.org and use downloader.
- to see the final version go to github.com/angular-university/courses go into 'getting started' then 'final-project'. download repo.
  * run 'npm install'
  * install angular-cli globally: 'npm install -g angular-cli'
  * 'ng serve'
  * url: localhost:4200

3. Angular 2 Final Application Scaffolding using the Angular CLI
setup:
node -v = check version. want > 6.
install angular cli:
sudo npm install -g angular-cli
ng new final-project
cd final-project
ng serve

4. Installing the Starter Kit
https://github.com/angular-university/angular-firebase-app-starter

5. Firebase Real-Time Database Hello World - First Query - Debug Websockets !
setup firebase with firebase sdk
sign into firebase.google.com (for tutorial, used my gmail account diane.douglas1)
create new project from console 'final-project-recording'
click on it and from welcome -> 'database', go to security rules and start by setting read/write to "true". hit 'publish'.
click 'add firebase to web app' from console
copy whole thing and paste to index.html under <app-root>
select project -> 'database'.
name root node 'Hello World Firebase' in browser editor.

// then in index.html under the 'initializeApp'
```
var root = firebase.database().ref();
```
// subscribe to value and pass in callback, called when value is available in // browser. pass in callback a variable 'snap' and log it.
```
root.on('value', function(snap) {
  console.log(snap.val());
})
```
function is called when the value is available in the browser and whenever it changes in real time. uses web sockets. view data in dev tools under Network > WS

A reference, and a snapshot.

6. Firebase Fundamentals - References, Snapshots and Keys

a reference is a reference to any node in the firebase, not just root.
we can point to 'messages' or 'users' by specifying it in the .ref call.

var root = firebase.database().ref('messages');
or
var root = firebase.database().ref('messages/2');

root.on('value', function(snap) {
  console.log(snap.key, snap.val());
})
*** arbitrary structure like json
*** point to any node with a reference
*** and query and receive back a snapshot containing key and value.
array v object? firebase array support more later.

7. Use Firebase SDK with Typescript - Preparing to Run a Firebase Database Population Script

install firebase via npm to fill database using a script.
take out the script tag loading the firbase sdk.
npm install firebase --save
then require it in app.component.ts:

import { Component } from '@angular/core';
import { initializeApp, database } from 'firebase';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app works!';
  //////added
  constructor() {
    // Initialize Firebase
    var config = {
      apiKey: "AIzaSyAwuKl7qjXwEFV4e_XdCLY8goNChIMgc1w",
      authDomain: "tutorial-b967f.firebaseapp.com",
      databaseURL: "https://tutorial-b967f.firebaseio.com",
      storageBucket: "tutorial-b967f.appspot.com",
      messagingSenderId: "979501840072"
    };
    initializeApp(config);

    var root = database().ref('users');
    root.on('value', function(snap){
      var users = snap.val();
      var key = snap.key;
      // console.log(users[0].name);
      users.forEach(function(user){
        console.log(user.name);
      })
    })
  }
  ////////
}


8. firebase push key is the long string of crap that forms an id.
and also 9. Firebase Data Modeling 101 - How To Model Data In Firebase ?
node = a table in sql

in order to run 'npm run populate-db' we need ts-node installed.
npm install ts-node -D

In the script, we are looping through an array of course objects.
Each course object has an array stored at the key of "lessons" and the array holds lesson objects.
First we create an entry in the courses table, then we create an entry in the lessons table, get its key and store it in an array.
Finally the array of lesson keys gets stored in the third table under the course id. Each lesson key is stored with a value of true. this is an association node.
keep data flat.

10. Firebase Key Generation - How to use the Firebase Push Keys, Should We Use Them and Why ?

generated by firebase for us, corresponding to the timestamp. sort by time.
they can be syncronously generated in the client without having to contact the database for that. client generates it and pushes the data to the server. no need to verify uniqueness.

11. Firebase Arrays - Does Firebase Support Arrays ?
Not really. arrays are dangerous because you can't rely on things being in the same order.
if you do use numeric keys, firebase sdk returns a snapshot of an array. but you should probably avoid it and embrace 'lists' in firebase. push to a list to generate a key.

12: AngularFire 2 Hello World - How To Write your First Query using AngularFire 2

How to query lists in firebase
instead of firebase sdk we are going to use AngularFire library instead.
npm install angularfire2 --save

Then add module to imports of app.module.ts
imports: [
  AngularFireModule.initializeApp(firebaseConfig)
]

13: AngularFire 2 Object Observables - How to Read Objects from a Firebase
There are two primitives FirebaseListObservable and FirebaseObjectObservable

object observable lets us get a single object and subscribe to it, list observable is for groups of objects.

const course$ : FirebaseObjectObservable<any> = af.database.object('courses/-K_fUAmBdZLQRnQWPmQM')
course$.subscribe(
  val => console.log(val)
)

14: How to Write Data to the Database using AngularFire 2 ? Adding Elements to a List

listPush.
get reference to courses and call listPush on it. It will add an element to the list!
just get a reference to a list node, call 'push' method and pass an object in to add it to the database.

reference:

this.courses$ = af.database.list('courses');

trigger this from a button to save:

this.courses$.push({name: 'Wizardry'})
  .then(
    () => console.log('List Push Done'),
    () => console.log('There was an error.')
  );
// one object at a time for push method.

15. How To Remove an Element from a List using AngularFire 2 ?

Delete with listRemove. pass it in an element of the list.
subscribe to the element you want to remove and store it in a property so that you can pass it into the firebase 'remove' method.
// make a property to hold the thing you want to delete:
  firstCourse: any;

// make a reference to the list of things that you are deleting from
this.courses$ = af.database.list('courses');

// get the first course object and subscribe to it, and store it in the 'firstCourse' property.
this.courses$.map(courses => courses[0])
  .subscribe(
    course => this.firstCourse = course
  );

// pass that property into the courses$ list reference remove method in a function called from a button.

listRemove() {
  this.courses$.remove(this.firstCourse);
}

16. How To Update an Element in a Firebase List using AngularFire 2 ?
Take an object and change the value of a property without changing the other ones.

Reuse the property you made with map/subscribe by passing it into the update method on the list that holds the object you are changing. Then the update method takes a second argument which is an object holding just the key/value pairs you want to change.

listUpdate() {
  this.courses$.update(this.firstCourse, {name: "advanced wizardry"});
}

17. How to Modify an Object in Firebase using AngularFire 2, what is the Difference Between Set and Update?

firebase Object observables have methods similar to list observables. We call them on the things we make with subscribe.
.remove() will delete the object you have subscribed to.
.update({key: value}) will edit the object you have subscribed to, preserving any key/value pairs that you are not changing.
.set({key: value}) will remove any properties you don't include in the object you pass in.

18. Starting the Application From the Beginning - Build the Home Screen
display lessons on the screen

create home component
ng generate component home
<app-home></app-home>

then in app/home you will find your component.ts and .html files.
inject service in each of your components

19. Building our First Firebase Service - The Lessons Service
ng generate service shared/model/lessons
note: path to service has to exist already. had to create model folder.

add it to the providers array in app.module.ts

import {LessonsService} from "./shared/model/lessons.service";
providers: [LessonsService],

*LessonsService is what we are exporting from the service file.

then inject in the component constructor

then call it in ngOnInit.
*****
constructor(private LessonsService: LessonsService) { }

ngOnInit() {
  this.lessonsService.findAllLessons();
}
*****

make a method called 'findAllLessons' - like our getAll
returns an observable with a list of observables.

Now we want a lesson type
in the model, add the lesson class.
shared/model/lesson.ts

export class Lesson {
  constructor(
    public $key: string,
    description: string,
    duration: string,
    url: string,
    tags: string,
    videoUrl: string,
    longDescription: string,
    courseId: string
  )
}


Then in lessons service make method called 'findAllLessons', not type any anymore.
inject AngularFire in the service constructor.
also import the model, AngularFire, and Observable in the service.

findAllLessons(): Observable<Lesson> {
  return this.af.database.list('lessons');
}

Then, in ngOnInit in our component with the LessonsService imported, and we inject it in the constructor, then we're able to call its findAllLessons() method, which returns an observable, which we subscribe to in the component.

lessons: Lesson[];

ngOnInit() {
  this.lessonsService.findAllLessons()
    .subscribe(
      lessons => this.lessons = lessons
    )
}

for debugging add do method with map method from rxjs library in app.module
Then you can print out the result from your observable with:

this.lessonsService.findAllLessons()
  .do(console.log)
  .subscribe(
    lessons => this.lessons = lessons
  )

  then we can use this.lessons in our template.


Total Lessons: lessons?.length

*ngFor="let lesson of lessons"
{{lesson.description}}

19. Angular 2 Smart Components vs Presentation Components: What's the Difference and When to Use Each ?

Smart components are tied to the service, and inherently the app, presentation components just display whatever data you pass to them.

20. Pitfall of using typescript classes
Only properties are allowed in the model. What you get back from the findAllLessons method is a JSON object, or a list of JSON objects. Which itself is probably inside a JSON object. But whatever. The idea is that we can get our data back in the service like this:
*/

// inside our service
findAllLessons(): Observable<Lesson[]> {

  return this.af.database.list('lessons')
    .do(console.log)
    .map(lessonsAsJson => Lesson.fromJsonList(lessonsAsJson));

}

// In the Lesson model class lesson.ts
// Create two static functions. One of them translates a list of observables into an array of Lessons
// the other one translates a single observable object into a single Lesson object - which is actually useful.


class Lesson {
  constructor(){}

  static fromJsonList(arrayOfLessonObservables):Lesson[] {
    return arrayOfLessonObservables.map(inputJsonSingleLesson =>
      Lesson.fromJson(inputJsonSingleLesson));

  }

  static fromJson({
      $key,
      description,
      duration,
      url,
      tags,
      videoUrl,
      longDescription,
      courseId}):Lesson {
    return new Lesson($key, description, duration, url, tags, videoUrl, longDescription, courseId);
  }
}


//21. How to implement clientside search.

WE have a component inside of our home component that displays all lessons.
We are passing that array of lessons in as a regular input parameter.

in the home template:

<lessons-list [lessons]="lessonsProperty"></lessons-list>

Then we want to rename 'lessonsProperty' property in the home component to 'allLessons' and adds a new one called 'filtered'.
This will hold the lessons that match the search term.
We will also now pass in the 'filtered' property to the lessons-list component to only display those.

inside of ngOnInit we are querying the database by calling 'findAllLessons' in our service.
Then we subscribe to the return value.
And inside of subscribe we can set both 'allLessons' and 'filtered' equal to the array of lessons we get back fromthe db.

ngOnInit() {
  this.lessonsService.findAllLessons()
    .do(console.log)
    .subscribe(
      lessons => this.allLessons = this.filtered = lessons
    )
}

Then we need to make filtered property react to changes in the search bar and only hold the lessons that match.

Here's the search bar.

<input (keyUp)=search(typedInput.value) #typedInput>

Then define the search method.

'
search(userInput) {
  this.filtered = this.allLessons.filter( currentLesson => currentLesson.description.includes(userInput));
}

22. Setting Up the Router Configuration of our Application

Router module

router.config.ts in /src/app


import {Route} from '@angular/router';
import {HomeComponent} from './home/home.component';
// import all components you are routing to

export const routerConfig : Route[] = [
  {
    path: 'home',
    component: HomeComponent
  },
  {
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  },
  {
    path: '**',
    redirectTo: 'home'
  }
];
export an array of Route objects tying a path to a component
_____

then in the app component we need to put the <router-outlet> directive in the template.
_____
then add RouterModule to imports array in app.module.ts:

import {RouterModule} from '@angular/router';
import {routerConfig} from './router.config';

imports: [
  BrowserModule,
  AngularFireModule.initializeApp(firebaseConfig),
  FormsModule,
  HttpModule,
  RouterModule.forRoot(routerConfig)
],

23. Building a Navigation Menu Using The Angular 2 Router

ng g component top-menu

this component holds links to other components
you can use the generated .css file to affect only the current component

also creates 'courses' component
ng g component courses

add route to new component in router  with import component statement.

then make router link:
<a routerLinkActive="menu-active" routerLink="path" [routerLinkActiveOptions]="{exact:true}">TEXT</a>
[routerLinkActiveOptions]="{exact:true}" is used when your link is a blank string

24.Setting Up the Master Screen of the Master Detail Pattern
_______
generate courses service:
ng g service shared/model/courses
add service to the providers array in app.module.ts
________
setting up courses component:
then in the courses.component.ts
inject service in the constructor, made the courses$ property to hold the observable array of courses.
Then we added a call to the service's 'findAllCourses' method which we are about to define.

import { Component, OnInit } from '@angular/core';
import { CoursesService } from '../shared/model/courses.service';
import { Observable } from 'rxjs/Rx';
import { Course } from '../shared/model/course.ts';

@Component({
  selector: 'app-courses',
  templateUrl: './courses.component.html',
  styleUrls: ['./courses.component.css']
})
export class CoursesComponent implements OnInit {
  courses$: Observable<Course[]>;

  constructor(private coursesService: CoursesService) { }

  ngOnInit() {
    this.courses$ = this.coursesService.findAllCourses();
  }

}
__________
then make course model shared/model/course.ts
structure looks like this:
export class Course {
  constructor(properties)
  static fromJson
  static fromJsonList
}

actual file:
export class Course {
  constructor(
    public $key: string,
    public url: string,
    public description: string,
    public iconUrl: string,
    public courseListIcon: string,
    public longDescription: string) {

  }


  static fromJsonList(json) : Course[] {
    return json.map(Course.fromJson);
  }

  static fromJson({$key, url, description, iconUrl, courseListIcon, longDescription}):Course {
    return new Course($key, url, description, iconUrl, courseListIcon, longDescription);
  }

}

__________

Then, in the courses.component.html
we can loop through courses$ observable by using async pipe

<p *ngFor="let course of (courses$ | async)">
  {{course.description}}
</p>
_________

then in the courses service we have to define the findAllCourses method and inside of it, we call the static fromJsonList method in our course model.


import { Injectable } from '@angular/core';
import {AngularFire} from 'angularfire2';
import {Observable} from 'rxjs/Rx';
import {Course} from './course';

@Injectable()
export class CoursesService {

  constructor(private af: AngularFire) { }

  findAllCourses(): Observable<Course[]> {
    return this.af.database.list('courses').map(Course.fromJsonList);
  }
}
25. Configuring the Angular 2 Router for Master To Detail Navigation
__________

create course detail component
ng g component course-detail

then add route to router.config.ts
instead of this:

{
  path: 'courses',
  component: CoursesComponent
},

we want this:

import {CoursesComponent} from './courses/courses.component';
import {CourseDetailComponent} from './course-detail/courses-detail.component';

{
  path: 'courses',
  children: [
    {
      path: ':id',
      component: CourseDetailComponent
    },
    {
      path: '',
      component: CoursesComponent
    }
  ]
},
*** remember to restart server after adding a new file with ng generate.

_______

Then in the courses.component.html file we want to create links to navigate to each course detail

<button [routerLink]="course.url">View</button>
don't forget square brackets in this case around routerLink.

This navigates to the relative url of the current page which would be /courses.
this would go to courses/whatever-is-in-that-url-property

26. Setting Up the Detail Screen of a Master Detail Setup
what links lessons to courses is the lessonsPerCourse node.
  courses
  lessons
  lessonsPerCourse
    courseId
      lessonId1 = true
      lessonId2 = true
      lessonId3 = true
      lessonId4 = true
set to true because we only need the key.
_______
in courses detail component:
create property to hold the lessons in current course:
lessons$: Observable<Lesson[]>;

Then inject the courses service in the constructor
and in ngOnInit call the service's 'findLessonsForCourse' method we're about to make.

Now we need to have the id of the course whose lessons we're interested in from the url.
To do that we must inject the 'activated route' Injectable provided by the router.
