/*
1. Build an Application with Angular 2 and Firebase - Application Demo and Course Objectives
intro

2. Installing Node and the Angular 2 and Firebase Demo Application
- need node 6 or higher
to install go to nodejs.org and use downloader.
- to see the final version go to github.com/angular-university/courses go into 'getting started' then 'final-project'. download repo.
  * run 'npm install'
  * install angular-cli globally: 'npm install -g angular-cli'
  * 'ng serve'
  * url: localhost:4200

3. Angular 2 Final Application Scaffolding using the Angular CLI
setup:
node -v = check version. want > 6.
install angular cli:
sudo npm install -g angular-cli
ng new final-project
cd final-project
ng serve

4. Installing the Starter Kit
https://github.com/angular-university/angular-firebase-app-starter

5. Firebase Real-Time Database Hello World - First Query - Debug Websockets !
setup firebase with firebase sdk
sign into firebase.google.com (for tutorial, used my gmail account diane.douglas1)
create new project from console 'final-project-recording'
click on it and from welcome -> 'database', go to security rules and start by setting read/write to "true". hit 'publish'.
click 'add firebase to web app' from console
copy whole thing and paste to index.html under <app-root>
select project -> 'database'.
name root node 'Hello World Firebase' in browser editor.

// then in index.html under the 'initializeApp'
```
var root = firebase.database().ref();
```
// subscribe to value and pass in callback, called when value is available in // browser. pass in callback a variable 'snap' and log it.
```
root.on('value', function(snap) {
  console.log(snap.val());
})
```
function is called when the value is available in the browser and whenever it changes in real time. uses web sockets. view data in dev tools under Network > WS

A reference, and a snapshot.

6. Firebase Fundamentals - References, Snapshots and Keys

a reference is a reference to any node in the firebase, not just root.
we can point to 'messages' or 'users' by specifying it in the .ref call.

var root = firebase.database().ref('messages');
or
var root = firebase.database().ref('messages/2');

root.on('value', function(snap) {
  console.log(snap.key, snap.val());
})
*** arbitrary structure like json
*** point to any node with a reference
*** and query and receive back a snapshot containing key and value.
array v object? firebase array support more later.

7. Use Firebase SDK with Typescript - Preparing to Run a Firebase Database Population Script

install firebase via npm to fill database using a script.
take out the script tag loading the firbase sdk.
npm install firebase --save
then require it in app.component.ts:

import { Component } from '@angular/core';
import { initializeApp, database } from 'firebase';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app works!';
  //////added
  constructor() {
    // Initialize Firebase
    var config = {
      apiKey: "AIzaSyAwuKl7qjXwEFV4e_XdCLY8goNChIMgc1w",
      authDomain: "tutorial-b967f.firebaseapp.com",
      databaseURL: "https://tutorial-b967f.firebaseio.com",
      storageBucket: "tutorial-b967f.appspot.com",
      messagingSenderId: "979501840072"
    };
    initializeApp(config);

    var root = database().ref('users');
    root.on('value', function(snap){
      var users = snap.val();
      var key = snap.key;
      // console.log(users[0].name);
      users.forEach(function(user){
        console.log(user.name);
      })
    })
  }
  ////////
}


8. firebase push key is the long string of crap that forms an id.
and also 9. Firebase Data Modeling 101 - How To Model Data In Firebase ?
node = a table in sql

in order to run 'npm run populate-db' we need ts-node installed.
npm install ts-node -D

In the script, we are looping through an array of course objects.
Each course object has an array stored at the key of "lessons" and the array holds lesson objects.
First we create an entry in the courses table, then we create an entry in the lessons table, get its key and store it in an array.
Finally the array of lesson keys gets stored in the third table under the course id. Each lesson key is stored with a value of true. this is an association node.
keep data flat.

10. Firebase Key Generation - How to use the Firebase Push Keys, Should We Use Them and Why ?

generated by firebase for us, corresponding to the timestamp. sort by time.
they can be syncronously generated in the client without having to contact the database for that. client generates it and pushes the data to the server. no need to verify uniqueness.

11. Firebase Arrays - Does Firebase Support Arrays ?
Not really. arrays are dangerous because you can't rely on things being in the same order.
if you do use numeric keys, firebase sdk returns a snapshot of an array. but you should probably avoid it and embrace 'lists' in firebase. push to a list to generate a key.

12: AngularFire 2 Hello World - How To Write your First Query using AngularFire 2

How to query lists in firebase
instead of firebase sdk we are going to use AngularFire library instead.
npm install angularfire2 --save

Then add module to imports of app.module.ts
imports: [
  AngularFireModule.initializeApp(firebaseConfig)
]

13: AngularFire 2 Object Observables - How to Read Objects from a Firebase
There are two primitives FirebaseListObservable and FirebaseObjectObservable

object observable lets us get a single object and subscribe to it, list observable is for groups of objects.

const course$ : FirebaseObjectObservable<any> = af.database.object('courses/-K_fUAmBdZLQRnQWPmQM')
course$.subscribe(
  val => console.log(val)
)

14: How to Write Data to the Database using AngularFire 2 ? Adding Elements to a List

listPush.
get reference to courses and call listPush on it. It will add an element to the list!
just get a reference to a list node, call 'push' method and pass an object in to add it to the database.

reference:

this.courses$ = af.database.list('courses');

trigger this from a button to save:

this.courses$.push({name: 'Wizardry'})
  .then(
    () => console.log('List Push Done'),
    () => console.log('There was an error.')
  );
// one object at a time for push method.

15. How To Remove an Element from a List using AngularFire 2 ?

Delete with listRemove. pass it in an element of the list.
subscribe to the element you want to remove and store it in a property so that you can pass it into the firebase 'remove' method.
// make a property to hold the thing you want to delete:
  firstCourse: any;

// make a reference to the list of things that you are deleting from
this.courses$ = af.database.list('courses');

// get the first course object and subscribe to it, and store it in the 'firstCourse' property.
this.courses$.map(courses => courses[0])
  .subscribe(
    course => this.firstCourse = course
  );

// pass that property into the courses$ list reference remove method in a function called from a button.

listRemove() {
  this.courses$.remove(this.firstCourse);
}

16. How To Update an Element in a Firebase List using AngularFire 2 ?
Take an object and change the value of a property without changing the other ones.

Reuse the property you made with map/subscribe by passing it into the update method on the list that holds the object you are changing. Then the update method takes a second argument which is an object holding just the key/value pairs you want to change.

listUpdate() {
  this.courses$.update(this.firstCourse, {name: "advanced wizardry"});
}

17. How to Modify an Object in Firebase using AngularFire 2, what is the Difference Between Set and Update?

firebase Object observables have methods similar to list observables. We call them on the things we make with subscribe.
.remove() will delete the object you have subscribed to.
.update({key: value}) will edit the object you have subscribed to, preserving any key/value pairs that you are not changing.
.set({key: value}) will remove any properties you don't include in the object you pass in.

18. Starting the Application From the Beginning - Build the Home Screen
display lessons on the screen

create home component
ng generate component home
<app-home></app-home>

then in app/home you will find your component.ts and .html files.
inject service in each of your components

19. Building our First Firebase Service - The Lessons Service
ng generate service shared/model/lessons
note: path to service has to exist already. had to create model folder.

add it to the providers array in app.module.ts

import {LessonsService} from "./shared/model/lessons.service";
providers: [LessonsService],

*LessonsService is what we are exporting from the service file.

then inject in the component constructor

then call it in ngOnInit.
*****
constructor(private LessonsService: LessonsService) { }

ngOnInit() {
  this.lessonsService.findAllLessons();
}
*****

make a method called 'findAllLessons' - like our getAll
returns an observable with a list of observables.

Now we want a lesson type
in the model, add the lesson class.
shared/model/lesson.ts

export class Lesson {
  constructor(
    public $key: string,
    description: string,
    duration: string,
    url: string,
    tags: string,
    videoUrl: string,
    longDescription: string,
    courseId: string
  )
}


Then in lessons service make method called 'findAllLessons', not type any anymore.
inject AngularFire in the service constructor.
also import the model, AngularFire, and Observable in the service.

findAllLessons(): Observable<Lesson> {
  return this.af.database.list('lessons');
}

Then, in ngOnInit in our component with the LessonsService imported, and we inject it in the constructor, then we're able to call its findAllLessons() method, which returns an observable, which we subscribe to in the component.

lessons: Lesson[];

ngOnInit() {
  this.lessonsService.findAllLessons()
    .subscribe(
      lessons => this.lessons = lessons
    )
}

for debugging add do method with map method from rxjs library in app.module
Then you can print out the result from your observable with:

this.lessonsService.findAllLessons()
  .do(console.log)
  .subscribe(
    lessons => this.lessons = lessons
  )

  then we can use this.lessons in our template.


Total Lessons: lessons?.length

*ngFor="let lesson of lessons"
{{lesson.description}}

19. Angular 2 Smart Components vs Presentation Components: What's the Difference and When to Use Each ?

Smart components are tied to the service, and inherently the app, presentation components just display whatever data you pass to them.

20. Pitfall of using typescript classes
Only properties are allowed in the model. What you get back from the findAllLessons method is a JSON object, or a list of JSON objects. Which itself is probably inside a JSON object. But whatever. The idea is that we can get our data back in the service like this:
*/

// inside our service
findAllLessons(): Observable<Lesson[]> {

  return this.af.database.list('lessons')
    .do(console.log)
    .map(lessonsAsJson => Lesson.fromJsonList(lessonsAsJson));

}

// In the Lesson model class lesson.ts
// Create two static functions. One of them translates a list of observables into an array of Lessons
// the other one translates a single observable object into a single Lesson object - which is actually useful.


class Lesson {
  constructor(){}

  static fromJsonList(arrayOfLessonObservables):Lesson[] {
    return arrayOfLessonObservables.map(inputJsonSingleLesson =>
      Lesson.fromJson(inputJsonSingleLesson));

  }

  static fromJson({
      $key,
      description,
      duration,
      url,
      tags,
      videoUrl,
      longDescription,
      courseId}):Lesson {
    return new Lesson($key, description, duration, url, tags, videoUrl, longDescription, courseId);
  }
}


//21. How to implement clientside search.

WE have a component inside of our home component that displays all lessons.
We are passing that array of lessons in as a regular input parameter.

in the home template:

<lessons-list [lessons]="lessonsProperty"></lessons-list>

Then we want to rename 'lessonsProperty' property in the home component to 'allLessons' and adds a new one called 'filtered'.
This will hold the lessons that match the search term.
We will also now pass in the 'filtered' property to the lessons-list component to only display those.

inside of ngOnInit we are querying the database by calling 'findAllLessons' in our service.
Then we subscribe to the return value.
And inside of subscribe we can set both 'allLessons' and 'filtered' equal to the array of lessons we get back fromthe db.

ngOnInit() {
  this.lessonsService.findAllLessons()
    .do(console.log)
    .subscribe(
      lessons => this.allLessons = this.filtered = lessons
    )
}

Then we need to make filtered property react to changes in the search bar and only hold the lessons that match.

Here's the search bar.

<input (keyUp)=search(typedInput.value) #typedInput>

Then define the search method.

'
search(userInput) {
  this.filtered = this.allLessons.filter( currentLesson => currentLesson.description.includes(userInput));
}

22. Setting Up the Router Configuration of our Application

Router module

router.config.ts in /src/app


import {Route} from '@angular/router';
import {HomeComponent} from './home/home.component';
// import all components you are routing to

export const routerConfig : Route[] = [
  {
    path: 'home',
    component: HomeComponent
  },
  {
    path: '',
    redirectTo: 'home',
    pathMatch: 'full'
  },
  {
    path: '**',
    redirectTo: 'home'
  }
];
export an array of Route objects tying a path to a component
_____

then in the app component we need to put the <router-outlet> directive in the template.
_____
then add RouterModule to imports array in app.module.ts:

import {RouterModule} from '@angular/router';
import {routerConfig} from './router.config';

imports: [
  BrowserModule,
  AngularFireModule.initializeApp(firebaseConfig),
  FormsModule,
  HttpModule,
  RouterModule.forRoot(routerConfig)
],

23. Building a Navigation Menu Using The Angular 2 Router

ng g component top-menu

this component holds links to other components
you can use the generated .css file to affect only the current component

also creates 'courses' component
ng g component courses

add route to new component in router  with import component statement.

then make router link:
<a routerLinkActive="menu-active" routerLink="path" [routerLinkActiveOptions]="{exact:true}">TEXT</a>
[routerLinkActiveOptions]="{exact:true}" is used when your link is a blank string

24.Setting Up the Master Screen of the Master Detail Pattern
_______
generate courses service:
ng g service shared/model/courses
add service to the providers array in app.module.ts
________
setting up courses component:
then in the courses.component.ts
inject service in the constructor, made the courses$ property to hold the observable array of courses.
Then we added a call to the service's 'findAllCourses' method which we are about to define.

import { Component, OnInit } from '@angular/core';
import { CoursesService } from '../shared/model/courses.service';
import { Observable } from 'rxjs/Rx';
import { Course } from '../shared/model/course.ts';

@Component({
  selector: 'app-courses',
  templateUrl: './courses.component.html',
  styleUrls: ['./courses.component.css']
})
export class CoursesComponent implements OnInit {
  courses$: Observable<Course[]>;

  constructor(private coursesService: CoursesService) { }

  ngOnInit() {
    this.courses$ = this.coursesService.findAllCourses();
  }

}
__________
then make course model shared/model/course.ts
structure looks like this:
export class Course {
  constructor(properties)
  static fromJson
  static fromJsonList
}

actual file:
export class Course {
  constructor(
    public $key: string,
    public url: string,
    public description: string,
    public iconUrl: string,
    public courseListIcon: string,
    public longDescription: string) {

  }


  static fromJsonList(json) : Course[] {
    return json.map(Course.fromJson);
  }

  static fromJson({$key, url, description, iconUrl, courseListIcon, longDescription}):Course {
    return new Course($key, url, description, iconUrl, courseListIcon, longDescription);
  }

}

__________

Then, in the courses.component.html
we can loop through courses$ observable by using async pipe

<p *ngFor="let course of (courses$ | async)">
  {{course.description}}
</p>
_________

then in the courses service we have to define the findAllCourses method and inside of it, we call the static fromJsonList method in our course model.


import { Injectable } from '@angular/core';
import {AngularFire} from 'angularfire2';
import {Observable} from 'rxjs/Rx';
import {Course} from './course';

@Injectable()
export class CoursesService {

  constructor(private af: AngularFire) { }

  findAllCourses(): Observable<Course[]> {
    return this.af.database.list('courses').map(Course.fromJsonList);
  }
}
25. Configuring the Angular 2 Router for Master To Detail Navigation
__________

create course detail component
ng g component course-detail

then add route to router.config.ts
instead of this:

{
  path: 'courses',
  component: CoursesComponent
},

we want this:

import {CoursesComponent} from './courses/courses.component';
import {CourseDetailComponent} from './course-detail/courses-detail.component';

{
  path: 'courses',
  children: [
    {
      path: ':id',
      component: CourseDetailComponent
    },
    {
      path: '',
      component: CoursesComponent
    }
  ]
},
*** remember to restart server after adding a new file with ng generate.

_______

Then in the courses.component.html file we want to create links to navigate to each course detail

<button [routerLink]="course.url">View</button>
don't forget square brackets in this case around routerLink.

This navigates to the relative url of the current page which would be /courses.
this would go to courses/whatever-is-in-that-url-property

26. Setting Up the Detail Screen of a Master Detail Setup
what links lessons to courses is the lessonsPerCourse node.
  courses
  lessons
  lessonsPerCourse
    courseId
      lessonId1 = true
      lessonId2 = true
      lessonId3 = true
      lessonId4 = true
set to true because we only need the key.
_______
in courses detail component:
create property to hold the lessons in current course:
lessons$: Observable<Lesson[]>;

Then inject the courses service in the constructor
also inject the the 'activated route' Injectable provided by the router.
The activated route Injectable lets us get parameters out of the url.

and in ngOnInit call the service's 'findLessonsForCourse' method we're about to make.
Pass it in the id of the course we're interested in, or the URL.

27. How To Make a Join in Firebase Using AngularFire 2 ? Reading a Course based on its url

query courses node based on the url property. find match, retrieve course.
Then we're going to use the course $key property in the lessonsPerCourse.
Find course and retrieve its list of lessons.
Then with each lesson key we're going to query the lessons node and get the lesson properties.

in courses service:
inject AngularFireDatabase directly in courses service.
constructor(private db: AngularFireDatabase) { }
then add two methods. One is findCourseByUrl using query.

findCourseByUrl(courseUrl: string): Observable<Course> {
  return this.db.list('courses', {
    query: {
      orderByChild: 'url',
      equalTo: courseUrl
      // courseUrl is passed in here from our 'id' parameter in course-detail.
    }
  }).map(results => results[0]);
}

Then we add the second method to find the lessons for that course:

findLessonsForCourse(courseUrl: string): Observable<Lesson[]>{

  // get course observable we have navigated to by url.
  const course$ = this.findCourseByUrl(courseUrl);

  // go to the lessonsPerCourse table(node)
  // inside of there, find the course table by $key output lessons.
  // get back gross firebase object observable array.
  const lessonsPerCourse$ = course$
    .switchMap(course => this.db.list('lessonsPerCourse/' + course.$key))
    .do(console.log);

    // talking to the reference we got back from lessonsPerCourse above
    // for each firebaseObjectObservable in that array we call db.object to get back the observable for the lesson from the lessons table
    // this is at the address lessons/lessonkey
    // THEN we call flatmap on that and somehow that gives us an array of useable lesson objects.
  return lessonsPerCourse$
    .map(lessonsPerCourseParameter => lessonsPerCourseParameter.map(lesson => this.db.object('lessons/' + lesson.$key)) )
    .flatMap(fbojs => Observable.combineLatest(fbojs) )
    .do(console.log);
}


________

28.  Displaying the Lessons Per Course in the Course Detail Page

in course-detail.ts:
we are now talking to the service to call both findCourseByUrl to display the name of the course and findLessonsForCourse to display the lessons.
we store the return value from each of those in an observable property which we can display in the template.

lessons$: Observable<Lesson[]>;
course$ : Observable<Course>;

constructor(private route: ActivatedRoute, private coursesService:CoursesService) { }

ngOnInit() {
  // need to pass in the course id from URL
  const courseUrl = this.route.snapshot.params['id'];
  this.course$ = this.coursesService.findCourseByUrl(courseUrl);
  this.lessons$ = this.coursesService.findLessonsForCourse(courseUrl);
}
________
In the template we just have to remember to use the async pipe.
You can pass these observables into child components if you like or loop through them.
Just have to remember that for displaying specific properties you have to use the elvis ? operator.


// one property of an observable
<h2>{{ (course$ | async)?.description }}</h2>

// a list of observables being passed into a child component
<lessons-list [lessons]="lessons$ | async"></lessons-list>
// then in the child component lessons is treated normally because async already used.
<li *ngFor="let lesson of lessons">{{lesson.description}}</li>

_______
29.How To Do Pagination in Firebase ? Loading the First Page of a Paginated Table
query parameters:
you could 'startAt' a certain lesson, orderByValue, and 'limitToFirst' 10 results.
or reverse: 'endAt' element to end at the query and 'limitTo' last for only the last 10 results.

first page of 3 elements
emit startAt property limiToFirst 3.
make new method to call from course-detail in service:

loadFirstLessonsPage(courseUrl: string, pageSize): Observable<Lesson[]> {

}

call from course-detail:
// get 3 results.
this.lessons$ = this.coursesService.loadFirstLessonsPage(courseUrl, 3);
_______
SHORT BREAK FROM VIDEOS HERE BECAUSE NOTHING WOULD COMPILE ON MY COMPUTER.
For reference for later here's what I did.

I got this error that was preventing shit from running.
https://stackoverflow.com/questions/41285889/ctorparameters-map-is-not-a-function-in-angular2-mdl

tried to fix it as described above by updating the angular cli to "angular-cli": "1.0.0-beta.24", as described but didn't work/didn't fix it all the way - gave me different errors. so tried this: https://github.com/angular/angular-cli/issues/2835
  1.  delete node_modules
  2.  do a fresh npm i angular-cli@1.0.0-beta.18 -g
  3.  do again ng init
  4.  Y --> override package.json

this seems to have also given me that angular cli beta.24 version plus other stuff. 

then, I got rid of the 'can't find angularfire' etc errors created because I overwrote package.json by installing angularfire2 and firebase from install intructions on angularfire:
npm install firebase angularfire2 --save

then new errors. https://github.com/angular/angular-cli/issues/3665
change versions for all angular packages in package.json to one version 2.3.1
Lock your @angular packages to "2.3.1"
delete node modules, run npm install again.


got this error: https://github.com/angular/angular-cli/issues/3799
tried to change compiler-cli to 2.4.1 as per instructions but didn't do anything and app was running succesfully with this error anyway so i committed.

FINALLY getting rid of last error: 
also from here: https://github.com/angular/angular-cli/issues/3799
ran "ng init", say Y for overwriting everything except app.component. 
I assume this is different from the "npm i" I did earlier. 

then delete node modules
npm install
npm install firebase angularfire2 --save
ng serve

This worked without errors. Somewhere in there I had to change the statement where we import our model to not use .ts at the end because apparently that's important now:

import { Course } from '../shared/model/course';

instead of:

import { Course } from '../shared/model/course.ts';

finally made sure i could still build:
reclone 
git checkout tutorial-dev
npm install
typings install

ONWARD>>>>>>>

______________________

30. PART 1 of Firebase Pagination Continued - Loading the Next Page

Here I fixed the rest of the first part of pagination. At this point we are seeing the first 3 results of lessons in a given course. Here are the ingredients:
________________________________THE HTML
In course-detail.html

<lessons-list [lessons]="currentLessons$ | async"></lessons-list>

Here we are passing in the currentLessons$ property to the lessons-list component using the async pipe. lessons-list is a normal component that doesn't have anything to do with observables or the database.


  @Input()
  lessons: Lesson[];

We also have access to the current course's properties in course-detail:

<h2>{{ (course$ | async)?.description }}</h2>
________________________________NEXT: The typescript talking to the service

Inside of course-detail in ngOnInit we need to call the service to fill the currentLessons$ property.


  currentLessons$: Observable<Lesson[]>; //displayed in html passed into lessons-list
  course$ : Observable<Course>; 

  constructor(private route: ActivatedRoute, private coursesService:CoursesService) { }

  ngOnInit() {
    //get the course's url property from id parameter in this url. this is confusingly stored in 'id'
    const courseUrl = this.route.snapshot.params['id']; 
    //first find the course to display its description.
    this.course$ = this.coursesService.findCourseByUrl(courseUrl); // pass in 
    //load the first 3 lessons for this course. 
    this.currentLessons$ = this.coursesService.loadFirstLessonsPage(courseUrl, 3);

  }

_________________________________NEXT IN THE SERVICE

loadFirstLessonsPage(courseUrl: string, pageSize: number): Observable<Lesson[]> {
  // receive course url we want and the number of lessons we want from that course.
  // call findLessonKeysPerCourseUrl by passing in the courseUrl and the query object.
  const firstPageLessonKeys$ = this.findLessonKeysPerCourseUrl(courseUrl,
    {
      query: {
        orderByKey: true,
        limitToFirst: pageSize
      }
    })
  .do(console.log); //print
  //finally, translate the returned lesson keys from above into lesson object observables.
  return this.findLessonsForLessonKeys(firstPageLessonKeys$);
}

The two utility functions used by the one above are:

findLessonKeysPerCourseUrl(courseUrl: string, query: FirebaseListFactoryOpts = {}): Observable<string[]> {
  // return the lesson keys that belong to an individual course including a query object optionally
  // find the course and then do a list call to the join table with the query object spit out an array of keys.
  return this.findCourseByUrl(courseUrl)
    .switchMap(course => this.db.list('lessonsPerCourse/' + course.$key, query))
    .map(lspc => lspc.map(lpc => lpc.$key));
}


Then this function uses the output of the previous function to translate into lesson objects from array of keys (observable strings)
  findLessonsForLessonKeys(lessonKeys$: Observable<string[]>):Observable<Lesson[]> {
    return lessonKeys$
      .map(lspc => lspc.map(lessonKey => this.db.object('lessons/' + lessonKey)))
      .flatMap(fbojs => Observable.combineLatest(fbojs))
  }

At this point we should be able to see the first 3 lessons of each course.
_______________
Then we need to get the next page...

in course-detail:

 // subscribe to observable to store it in property as not an observable so you  don't need to use async pipe to display.
 lessons: Lesson[]; //we use this to get the last lesson's key from this page to use for next method -not observable

 lessonsObservable$: Observable<Lesson[]>; // this used to be called currentLessons$. Changed its name since it's not going to be used in the template anymore to show the current lessons. 
 course$ : Observable<Course>;
 courseUrl: string;
 constructor(private route: ActivatedRoute, private coursesService:CoursesService) { }

 ngOnInit() {
   // need to pass in the course id from URL
   this.courseUrl = this.route.snapshot.params['id'];
   this.course$ = this.coursesService.findCourseByUrl(this.courseUrl);
   this.lessonsObservable$ = this.coursesService.loadFirstLessonsPage(this.courseUrl, 3);
   this.lessonsObservable$.subscribe(lessons => this.lessons = lessons); // subscribe to observable to store it in property as regular fuckin array of objects !!!!!!
   console.log(this.lessons);
   // need access to the last element of the lessons array to get its key. 
   // so we subscribe to observable retrieve lessons and store them in the lessons variable as not an observable.
   // also need to store course url as property to use it in multiple methods.

 }


 next() {
   var lengthOfLessons = this.lessons.length;
   var keyOfLastLessonOnPage = this.lessons[lengthOfLessons - 1].$key;
   
   this.coursesService.loadNextPage(this.courseUrl, keyOfLastLessonOnPage, 3)
     .subscribe(lessons => this.lessons = lessons);
 }

 Now in the HTML we can change currentLessons$ observable with async to normal lessons property:

 <lessons-list [lessons]="lessons"></lessons-list>


 Then in service:

  loadNextPage(courseUrl:string, lessonKey:string, pageSize:number): Observable<Lesson[]> {
    // get lesson keys for this course but with query object for next 3 results
    const lessonKeys$ = this.findLessonKeysPerCourseUrl(courseUrl, 
    {
      query : {
        orderByKey: true,
        startAt: lessonKey, // start at current lessonkey
        limitToFirst: pageSize + 1 //get 4, leave out the current one.
      }
    }); //translate to lesson observable objects
    return this.findLessonsForLessonKeys(lessonKeys$)
      .map(lessons => lessons.slice(1, lessons.length)); //here is where we remove the current lesson 
  }

  Also, don't forget to hook up the button :)

  <button (click)="next()">Next Course</button>

  NOW YOU CAN SEE 3 RESULTS AT A TIME WOOOOOOO!!!!
  _____________________ 
  PREVIOUS PAGE

  In service:

    loadPrevPage(courseUrl:string, lessonKey:string, pageSize:number): Observable<Lesson[]> {
    const lessonKeys$ = this.findLessonKeysPerCourseUrl(courseUrl, 
    {
      query : { //same as loadNextPage but we want the final 4 results, not first 4, limited to current page's first lesson. so change startAt to endAt and limitToFirst to limitToLast.
        orderByKey: true,
        endAt: lessonKey,
        limitToLast: pageSize + 1
      }
    });
    return this.findLessonsForLessonKeys(lessonKeys$)
      .map(lessons => lessons.slice(0, lessons.length - 1)); //then we use slice to keep the whole array but the last element.
  }

  In course-detail HTML hook up button to prev() method. we're still going to use the lessons property to hold our current 3 results.

  <button (click)="prev()">Previous Course</button>